trigger:
  batch: true
  branches:
    include:
    - master
  paths:
    exclude:
    - README.md
    - .editorconfig
    - .gitignore

pr:
  branches:
    include:
    - master
  paths:
    exclude:
    - README.md
    - .editorconfig
    - .gitignore

name: $(Build.BuildId)

variables:
- name: VMImage
  value: 'windows-2019'
- name: BuildPlatform
  value: 'Any CPU'
- name: BuildConfiguration
  value: Release
- group: 'Code Signing'
- group: 'GitHub Release'


stages:
- stage: build
  displayName: Build NuGet Packages
  jobs:
  - job: buildJob
    displayName: Build Prism.Plugin.Logging
    pool:
      vmImage: $(VMImage)
      demands:
      - MSBuild
    steps:
    - task: DotNetCoreInstaller@0
      inputs:
        version: '3.0.100-preview7-012821'

    - task: NuGetToolInstaller@0
      displayName: Use NuGet 5.1.0
      inputs:
        versionSpec: 5.1.0

    - task: NuGetCommand@2
      displayName: 'NuGet restore'
      inputs:
        feedsToUse: config
        nugetConfigPath: NuGet.config

    - task: MSBuild@1
      displayName: Build Prism.Plugin.Logging
      inputs:
        solution: Prism.Plugin.Logging.sln
        platform: '$(BuildPlatform)'
        configuration: '$(BuildConfiguration)'
        msbuildArguments: '/p:DebugType=portable /p:JavaSdkDirectory="$(JAVA_HOME)"'

    - powershell: ./Sign-Packages.ps1
      workingDirectory: build
      displayName: Authenticode Sign Artifacts
      env:
        SignClientUser: $(SignClientUser)
        SignClientSecret: $(SignClientSecret)
        SignClientClientId: $(SignClientClientId)
        SignClientTenantId: $(SignClientTenantId)
        SignServiceResourceId: $(SignServiceResourceId)
      condition: and(succeeded(), not(eq(variables['build.reason'], 'PullRequest')), not(eq(variables['SignClientSecret'], '')), not(eq(variables['SignClientUser'], '')))

    - task: PublishPipelineArtifact@0
      displayName: Publish Package Artifacts
      inputs:
        artifactName: NuGet
        targetPath: '$(Build.ArtifactStagingDirectory)'
      condition: and(succeeded(), eq(variables['system.pullrequest.isfork'], false))
- stage: deploy
  displayName: Deploy NuGets
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  jobs:
  - deployment: MyGet
    displayName: MyGet.org
    environment: MyGet
    strategy:
      runOnce:
        deploy:
          steps:
          - task: NuGetCommand@2
            displayName: NuGet Push
            inputs:
              command: push
              packagesToPush: '$(Pipeline.Workspace)/**/*.nupkg'
              nuGetFeedType: external
              publishFeedCredentials: 'Prism.Plugins - MyGet'
  - deployment: NuGet
    displayName: NuGet.org
    environment: NuGet
    condition: and(succeeded(), or(eq(variables['IS_PREVIEW'], true), eq(variables['IS_RELEASE'], true)))
    strategy:
      runOnce:
        deploy:
          steps:
          - powershell: |
             try {
                 $artifactDirectory = $env:PIPELINE_WORKSPACE
                 Write-Host "Currect working directory $artifactDirectory"
                 $nupkg = Get-ChildItem -Path $artifactDirectory -Filter *.nupkg -Recurse | Select-Object -First 1

                 if($null -eq $nupkg) {
                     Throw "No NuGet Package could be found in the current directory"
                 }

                 Write-Host "Package Name $($nupkg.Name)"
                 $nupkg.Name -match '^(.*?)\.((?:\.?[0-9]+){3,}(?:[-a-z]+)?)\.nupkg$'

                 $VersionName = $Matches[2]
                 $IsPreview = $VersionName -match '-pre$'
                 $ReleaseDisplayName = $VersionName

                 if($null -eq $env:IS_PREVIEW) {
                     Write-Output ("##vso[task.setvariable variable=IS_PREVIEW;]$IsPreview")
                 }

                 if($true -eq $IsPreview) {
                     $ReleaseDisplayName = "$VersionName - Preview"
                 }

                 Write-Host "Version Name" $VersionName
                 Write-Host "Release Display Name $ReleaseDisplayName"
                 Write-Output ("##vso[task.setvariable variable=VersionName;]$VersionName")
                 Write-Output ("##vso[task.setvariable variable=ReleaseDisplayName;]$ReleaseDisplayName")
             }
             catch {
                 Write-Error  $_
                 exit 1
             }

            name: processName
            displayName: Process Artifacts for Release

          - task: GithubRelease@0 
            displayName: 'Create GitHub Release'
            inputs:
              githubConnection: 'GitHub - Dan Siegel'
              title: '$(ReleaseDisplayName)'
              tag: 'v$(VersionName)'
              isPreRelease: $(IS_PREVIEW)
              assets: '$(Pipeline.Workspace)/**/*.nupkg'
              addChangeLog: true
              isDraft: true

          - task: NuGetCommand@2
            displayName: NuGet Push
            inputs:
              command: push
              packagesToPush: '$(Pipeline.Workspace)/**/*.nupkg;!$(Pipeline.Workspace)/**/*.symbols.nupkg'
              nuGetFeedType: external
              publishFeedCredentials: 'NuGet'
